version: '3.8'

services:
  # API Gateway
  api-gateway:
    image: kong:3.3
    container_name: hotel-erp-gateway
    environment:
      KONG_DATABASE: 'off'
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: '0.0.0.0:8000 ssl'
      KONG_ADMIN_LISTEN: '0.0.0.0:8001 ssl'
    volumes:
      - ./src/api-gateway/config:/usr/local/kong/declarative:ro
      - ./src/api-gateway/ssl:/usr/local/kong/ssl:ro
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - hotel-erp-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Billing Service
  billing-service:
    build:
      context: ./src/billing-service
      dockerfile: Dockerfile
    container_name: hotel-erp-billing
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/hotel_erp
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./src/billing-service:/usr/src/app:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      - db
      - redis
    networks:
      - hotel-erp-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Guest Service
  guest-service:
    build:
      context: ./src/guest-service
      dockerfile: Dockerfile
    container_name: hotel-erp-guest
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/hotel_erp
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./src/guest-service:/usr/src/app:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      - db
      - redis
    networks:
      - hotel-erp-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Room Service
  room-service:
    build:
      context: ./src/room-service
      dockerfile: Dockerfile
    container_name: hotel-erp-room
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/hotel_erp
      - REDIS_URL=redis://redis:6379
      - LOCK_SYSTEM_PORT=8080
    volumes:
      - ./src/room-service:/usr/src/app:ro
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      - db
      - redis
    networks:
      - hotel-erp-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # PostgreSQL Database
  db:
    image: postgres:13-alpine
    container_name: hotel-erp-db
    environment:
      - POSTGRES_DB=hotel_erp
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - hotel-erp-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hotel-erp-redis
    command: redis-server --appendonly yes
    volumes:
      - redisdata:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - hotel-erp-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

volumes:
  pgdata:
    name: hotel-erp-pgdata
  redisdata:
    name: hotel-erp-redisdata

networks:
  hotel-erp-network:
    driver: bridge
    driver_opts:
      encrypted: "true"
    name: hotel-erp-network