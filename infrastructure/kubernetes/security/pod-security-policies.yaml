# Kubernetes PodSecurityPolicies for Hotel Management ERP System
# Version: v1beta1
# Purpose: Define and enforce comprehensive pod-level security standards
# Compliance: PCI DSS, GDPR

apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: restricted-pods
  annotations:
    kubernetes.io/description: "Highly restrictive policy for PCI DSS compliant application workloads"
    seccomp.security.alpha.kubernetes.io/defaultProfileName: "runtime/default"
    apparmor.security.beta.kubernetes.io/defaultProfileName: "runtime/default"
    security.hotel-erp.io/audit: "true"
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - configMap
    - emptyDir
    - projected
    - secret
    - persistentVolumeClaim
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: MustRunAsNonRoot
    ranges:
      - min: 1000
        max: 65535
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: MustRunAs
    ranges:
      - min: 1000
        max: 65535
  fsGroup:
    rule: MustRunAs
    ranges:
      - min: 1000
        max: 65535
  readOnlyRootFilesystem: true
  forbiddenSysctls:
    - '*'
  seccompProfiles:
    - runtime/default

---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: privileged-pods
  annotations:
    kubernetes.io/description: "Restricted privileged policy for essential system components"
    seccomp.security.alpha.kubernetes.io/defaultProfileName: "runtime/default"
    apparmor.security.beta.kubernetes.io/allowedProfileNames: "runtime/default"
    security.hotel-erp.io/audit: "true"
    security.hotel-erp.io/restricted-namespaces: "kube-system,monitoring,security"
spec:
  privileged: true
  allowPrivilegeEscalation: true
  allowedCapabilities:
    - NET_ADMIN
    - SYS_TIME
    - SYS_ADMIN
  volumes:
    - '*'
  hostNetwork: true
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
  seccompProfiles:
    - runtime/default
  allowedHostPaths:
    - pathPrefix: "/etc/ssl/certs"
      readOnly: true
    - pathPrefix: "/var/log"
      readOnly: false

---
# RBAC Binding for PSP Enforcement
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: psp:restricted
rules:
  - apiGroups: ['policy']
    resources: ['podsecuritypolicies']
    verbs: ['use']
    resourceNames: ['restricted-pods']

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: psp:privileged
rules:
  - apiGroups: ['policy']
    resources: ['podsecuritypolicies']
    verbs: ['use']
    resourceNames: ['privileged-pods']

---
# Bind restricted PSP to default service accounts
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: default:restricted-psp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: psp:restricted
subjects:
  - kind: Group
    apiGroup: rbac.authorization.k8s.io
    name: system:authenticated

---
# Bind privileged PSP to system service accounts
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: privileged:psp
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: psp:privileged
subjects:
  - kind: ServiceAccount
    name: system:node
    namespace: kube-system
  - kind: ServiceAccount
    name: monitoring-sa
    namespace: monitoring