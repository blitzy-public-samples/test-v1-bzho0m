# Hotel Management ERP Web Frontend Deployment Configuration
# Version: 1.0.0
# Dependencies: namespace.yaml, configmap.yaml
# Purpose: Defines Kubernetes resources for deploying and managing the web frontend application

---
# Deployment configuration for web frontend application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-frontend
  namespace: hotel-erp-${ENV}
  labels:
    app: hotel-erp
    component: web-frontend
    environment: ${ENV}
    version: ${VERSION}
  annotations:
    description: "Hotel Management ERP Web Frontend Application"
    deployment.kubernetes.io/revision: "1"
spec:
  replicas: ${ENV === 'production' ? 3 : ENV === 'staging' ? 2 : 1}
  selector:
    matchLabels:
      app: hotel-erp
      component: web-frontend
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: hotel-erp
        component: web-frontend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: web-frontend
          image: hotel-erp/web-frontend:${VERSION}
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 30
          envFrom:
            - configMapRef:
                name: hotel-erp-config
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: nginx-cache
              mountPath: /var/cache/nginx
      volumes:
        - name: tmp
          emptyDir: {}
        - name: nginx-cache
          emptyDir: {}
      securityContext:
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: component
                      operator: In
                      values:
                        - web-frontend
                topologyKey: kubernetes.io/hostname

---
# Service configuration for web frontend
apiVersion: v1
kind: Service
metadata:
  name: web-frontend
  namespace: hotel-erp-${ENV}
  labels:
    app: hotel-erp
    component: web-frontend
    environment: ${ENV}
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: hotel-erp
    component: web-frontend

---
# Horizontal Pod Autoscaler configuration
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: web-frontend
  namespace: hotel-erp-${ENV}
  labels:
    app: hotel-erp
    component: web-frontend
    environment: ${ENV}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: web-frontend
  minReplicas: ${ENV === 'production' ? 3 : ENV === 'staging' ? 2 : 1}
  maxReplicas: ${ENV === 'production' ? 10 : ENV === 'staging' ? 5 : 3}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Pods
          value: 2
          periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Pods
          value: 1
          periodSeconds: 300