# Kubernetes Deployment Configuration for Hotel Management ERP Reservation Service
# Version: 1.0.0
# Dependencies: 
# - namespace.yaml: For environment isolation
# - configmap.yaml: For service configuration
# - metrics-server: v0.6.0 for HPA metrics
# Purpose: Defines the deployment configuration for the reservation service microservice

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reservation-service
  namespace: hotel-erp-${ENV}
  labels:
    app: hotel-erp
    service: reservation
    version: ${IMAGE_TAG}
    tier: backend
    managed-by: kubernetes
  annotations:
    description: "Reservation service handling hotel bookings and availability"
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
spec:
  replicas: 3
  selector:
    matchLabels:
      app: hotel-erp
      service: reservation
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: hotel-erp
        service: reservation
        version: ${IMAGE_TAG}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        checksum/config: ${CONFIG_CHECKSUM}
    spec:
      serviceAccountName: reservation-service
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
      containers:
      - name: reservation-service
        image: ${ECR_REGISTRY}/hotel-erp/reservation-service:${IMAGE_TAG}
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        resources:
          requests:
            cpu: "500m"
            memory: "512Mi"
          limits:
            cpu: "1000m"
            memory: "1Gi"
        envFrom:
        - configMapRef:
            name: hotel-erp-config
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: tmp
        emptyDir: {}
      - name: config
        configMap:
          name: hotel-erp-config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: service
                  operator: In
                  values:
                  - reservation
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
apiVersion: v1
kind: Service
metadata:
  name: reservation-service
  namespace: hotel-erp-${ENV}
  labels:
    app: hotel-erp
    service: reservation
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: hotel-erp
    service: reservation

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: reservation-service
  namespace: hotel-erp-${ENV}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: reservation-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Pods
        value: 2
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 1
        periodSeconds: 300