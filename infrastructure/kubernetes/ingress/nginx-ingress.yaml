# NGINX Ingress Controller Configuration v1.8.1
# Purpose: Handle external traffic routing with enhanced security and performance
# for the Hotel Management ERP system

apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-controller
  namespace: hotel-erp-prod
  labels:
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/part-of: hotel-erp
    app.kubernetes.io/version: "1.8.1"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  namespace: hotel-erp-prod
  labels:
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/part-of: hotel-erp
spec:
  replicas: 2  # High availability with multiple replicas
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-ingress
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx-ingress
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10254"
    spec:
      serviceAccountName: nginx-ingress-controller
      containers:
        - name: nginx-ingress-controller
          image: k8s.gcr.io/ingress-nginx/controller:v1.8.1
          args:
            - /nginx-ingress-controller
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
            - --election-id=ingress-controller-leader
            - --controller-class=k8s.io/ingress-nginx
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --annotations-prefix=nginx.ingress.kubernetes.io
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
            - name: metrics
              containerPort: 10254
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-configuration
  namespace: hotel-erp-prod
data:
  # Security configurations
  ssl-protocols: "TLSv1.2 TLSv1.3"
  ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384"
  ssl-prefer-server-ciphers: "on"
  hsts: "true"
  hsts-include-subdomains: "true"
  hsts-max-age: "31536000"
  
  # Performance optimizations
  use-proxy-protocol: "true"
  enable-real-ip: "true"
  proxy-body-size: "8m"
  proxy-read-timeout: "60"
  proxy-send-timeout: "60"
  client-max-body-size: "8m"
  keep-alive: "75"
  keep-alive-requests: "100"
  
  # Compression settings
  use-gzip: "true"
  gzip-level: "6"
  gzip-types: "application/json application/javascript text/css text/plain text/xml application/xml"

---
apiVersion: v1
kind: Service
metadata:
  name: ingress-nginx-controller
  namespace: hotel-erp-prod
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "60"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: ${AWS_CERT_ARN}
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "ssl"
spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP
    - name: https
      port: 443
      targetPort: 443
      protocol: TCP
  selector:
    app.kubernetes.io/name: nginx-ingress

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: nginx-ingress-controller
  namespace: hotel-erp-prod
  labels:
    app.kubernetes.io/name: nginx-ingress
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-ingress
  endpoints:
    - port: metrics
      interval: 30s
  namespaceSelector:
    matchNames:
      - hotel-erp-prod

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: nginx-ingress-controller
  namespace: hotel-erp-prod
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-ingress